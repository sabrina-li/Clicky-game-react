{"version":3,"sources":["components/ImgCard.js","components/CardList.js","components/MessageBanner.js","App.js","serviceWorker.js","index.js"],"names":["ImgCard","props","react_default","a","createElement","className","onClick","src","imgFile","alt","imgName","CardList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","clickHandler","e","id","clickedImageIds","indexOf","push","increaseScore","resetScore","setState","images","shuffleArray","state","arr","sort","Math","random","_this2","imagesCards","map","image","components_ImgCard","key","React","Component","MessageBanner","style","display","message","role","App","highScore","currentScore","timerId","showMessage","prevState","newCurrentScore","correct","clearTimeout","setTimeout","href","components_MessageBanner","components_CardList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7825f36d.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction ImgCard(props){\n    return <div className=\"card\" onClick={props.onClick}>\n        <img src={\"./images/\"+props.imgFile} alt={props.imgName}/>\n    </div>\n}\n\nexport default ImgCard;","import React from \"react\";\nimport ImgCard from './ImgCard';\n\nclass CardList extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n            images:this.shuffleArray(props.images)\n        };\n        this.clickedImageIds=[];\n    }\n    \n    shuffleArray(arr){\n        return arr.sort(()=>{return Math.random()-0.5});\n    }\n\n    clickHandler = (e,id)=>{\n        //count score or reset game\n        if(this.clickedImageIds.indexOf(id) === -1){//clicked on something never clicked - win\n            this.clickedImageIds.push(id);\n            this.props.increaseScore();\n        }else{//lose\n            this.clickedImageIds=[];\n            this.props.resetScore();\n        }\n        this.setState({images:this.shuffleArray(this.props.images)});\n    }\n\n    render(){\n        const imagesCards = this.state.images.map(image=>{\n            return <ImgCard imgFile={image.imgFile} imgName={image.imgName} key={image.id} onClick={(e)=>this.clickHandler(e,image.id)}/>\n        })\n        return <div className=\"cards-container\">{imagesCards}</div>\n    }\n    \n}\n\nexport default CardList;","import React from \"react\";\n\nfunction MessageBanner(props){\n    let style={\n        display:props.message?\"block\":\"none\"\n    }\n\n    return <div className=\"notification overlay\" role=\"dialog\" style={style}>\n            <button className=\"delete\"></button>\n            <p className=\"notification-text \">{props.message}</p>\n        </div>\n}\n\nexport default MessageBanner;","import React from 'react';\nimport CardList from './components/CardList';\nimport {images} from \"./images.json\";\nimport MessageBanner from \"./components/MessageBanner\";\nimport './App.scss';\n\nclass App extends React.Component{\n  state={\n    highScore:0,\n    currentScore:0,\n    message:''\n  }\n  timerId = 0;\n\n\n  increaseScore = ()=>{\n    this.showMessage(true);\n    this.setState(prevState=>{\n      const newCurrentScore = prevState.currentScore + 1;\n      const newHighScore = prevState.highScore>=newCurrentScore ? prevState.highScore:newCurrentScore;\n      return {highScore:newHighScore,currentScore:newCurrentScore}\n    })\n  }\n\n  resetScore = ()=>{\n    this.showMessage(false);\n    this.setState({currentScore:0});\n  }\n\n  showMessage = (correct)=>{\n    clearTimeout(this.timerId);\n    if(correct){\n      this.setState({message:\"Correct!\"});\n    }else{\n      this.setState({message:\"Wrong!\"})\n    }\n    this.timerId = setTimeout(() => {\n      this.setState({message:''})\n  }, 1000);\n  }\n\n  render(){\n    return <div className=\"App\">\n            <header className=\"App-header has-background-dark\">\n              <div className=\"level container has-text-light\">\n                <div>\n                  <h1 className=\"title is-2 has-text-light\">Visual Memory - Game!</h1>\n                </div>\n                <div id=\"scores\">\n                  <a className=\"subtitle is-5 has-text-link\" href=\"/\">How to</a>\n                  <p>Current Score: <span>{this.state.currentScore}</span></p>\n                  <p>Your High Score: <span>{this.state.highScore}</span></p>\n                </div>\n              </div>\n              <MessageBanner message={this.state.message} />\n            </header>\n            <main>\n              \n              <CardList images={images} increaseScore={this.increaseScore} resetScore={this.resetScore}/>\n            </main>\n          </div>\n  }\n\n    \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}